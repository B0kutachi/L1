#include "stdafx.h"
#include <iostream>
#include <exception>
#include <string>

using namespace std;

void Sort(double* values, int count)
{
	double swap;

	if (count <= 0)
	{
		throw exception();
	}

	else
	for (int i = 0; i < count; i++)
	{
		for (int j = 0; j < count; j++)
		{
			if (values[i] < values[j])
			{
				swap = values[i];
				values[i] = values[j];
				values[j] = swap;
			}
		}
	}
}

void DemoSort()
{
	try
	{
		int count = 5;
		double* values = new double[count] { 100.0, 249.0, 12.0, 45.0, 23.5 };
		cout << "\nValues in array: " << count << endl;
		Sort(values, count);
		cout << "Sorted array:" << endl;
		for (int i = 0; i < count; i++)
			cout << values[i] << " ";
		delete[] values; values = nullptr;
	}
	catch (const exception& ex)
	{
		cout << "\nException catched!";
	}

	try
	{
		int count = 0;
		double* values = new double[count] {  };
		cout << "\n\n\nValues in array: " << count << endl;
		Sort(values, count);
		cout << "Sorted array: " << endl;
		for (int i = 0; i < count; i++)
			cout << values[i] << " ";
		delete[] values; values = nullptr;
	}
	catch (const exception& ex)
	{
		cout << "Exception catched! " << "Invalid count." << endl;
	}
}

struct Rectangle {
	double Length;
	double Width;
	string Color;
};

struct Flight {
	string DeparturePoint;
	string Destination;
	int FlightTimeInMinutes;
};

struct Movie {
	string Title;
	int DurationInMinutes;
	int TheYearOfRelease;
	string Genre;
	double Rating;
};

struct Time {
	int clocks;
	int minutes;
	int seconds;
};

struct Contact {
	string Name;
	int PhoneNumber;
	string Email;
};

struct Song {
	string Title;
	string Creator;
	int DurationInSeconds;
};

struct Discipline {
	string Name;
	string MinimumCourse;
	int NumberOfHours;
};

void DemoRectangle()
{
	Rectangle rectangle1{ 20, 15, "blue" };
	Rectangle* ptr1_rect1 = &rectangle1;
	Rectangle* ptr2_rect1 = &rectangle1;
	cout << "\nEnter length of rectangle: ";
	cin >> ptr1_rect1->Length;
	cout << "Enter width of rectangle: ";
	cin >> ptr1_rect1->Width;
	cout << "Enter color of rectangle: ";
	cin >> ptr1_rect1->Color;
	cout << "A rectangle has a: " << "size " << ptr1_rect1->Length << "x" << ptr1_rect1->Width << 
		" and " << ptr1_rect1->Color << " color." << endl;
	cout << "\nAddress of ptr1: " << ptr1_rect1;
	cout << "\nAddress of ptr2: " << ptr2_rect1 << endl;
}

void DemoFlight()
{
	Flight flight1{ "Moscow", "Tomsk", 270 };
	Flight* ptr1_fl1 = &flight1;
	Flight* ptr2_fl1 = &flight1;
	cout << "\nEnter point of departure: ";
	cin >> ptr1_fl1->DeparturePoint;
	cout << "Enter point of destination: ";
	cin >> ptr1_fl1->Destination;
	cout << "Enter flight time in minutes: ";
	cin >> ptr1_fl1->FlightTimeInMinutes;
	cout << "\nFlight: " << "from " << ptr1_fl1->DeparturePoint << " to " << ptr1_fl1->Destination << " takes " 
		<< ptr1_fl1->FlightTimeInMinutes << " minutes." << endl;
	cout << "\nAddress of ptr1: " << ptr1_fl1;
	cout << "\nAddress of ptr2: " << ptr2_fl1 << endl;
}

void DemoMovie()
{
	Movie movie1{ "King Arthur's sword", 126, 2017, "fantasy, action, drama, adventure", 7.2 };
	Movie* ptr1_mv1 = &movie1;
	Movie* ptr2_mv1 = &movie1;
	cout << "\nEnter title of movie: ";
	cin.ignore(32767, '\n');
	getline(cin, ptr1_mv1->Title);
	cout << "Enter duration of movie(in minutes): ";
	cin >> ptr1_mv1->DurationInMinutes;
	cout << "Enter release year date: ";
	cin >> ptr1_mv1->TheYearOfRelease;
	cout << "Enter genres of movie: ";
	cin.ignore(32767, '\n');
	getline(cin, ptr1_mv1->Genre);
	cout << "Enter rating of movie: ";
	cin >> ptr1_mv1->Rating;
	cout << "\nMovie: " << ptr1_mv1->Title << endl << "Duration: " << ptr1_mv1->DurationInMinutes << endl 
		<< "Release year date: " << ptr1_mv1->TheYearOfRelease << endl << "Genres: " <<
			ptr1_mv1->Genre << endl << "Rating: " << ptr1_mv1->Rating << endl;
	cout << "\nAddress of ptr1: " << ptr1_mv1;
	cout << "\nAddress of ptr2: " << ptr2_mv1 << endl;
}

void DemoTime()
{
	Time time1{ 18, 30, 49 };
	Time* ptr1_time1 = &time1;
	Time* ptr2_time1 = &time1;
	cout << "\nEnter an hour: ";
	cin >> ptr1_time1->clocks;
	cout << "Enter minutes: ";
	cin >> ptr1_time1->minutes;
	cout << "Enter seconds: ";
	cin >> ptr1_time1->seconds;
	cout << "Time is: " << ptr1_time1->clocks << ":" << ptr1_time1->minutes << ":" << ptr1_time1->seconds << endl;
	cout << "\nAddress of ptr1: " << ptr1_time1;
	cout << "\nAddress of ptr2: " << ptr2_time1 << endl;
}

void chooseStruct()
{
	int y = 0;
	cout << "\nChoose what you want to enter: 1: rectangle, 2: flight, 3: movie, 4: time." << endl;
	cin >> y;
	if (y == 1) 
		DemoRectangle();
	if (y == 2)
		DemoFlight();
	if (y == 3)
		DemoMovie();
	if (y == 4)
		DemoTime();
	if (y > 4 | y < 1)
		cout << "Invalid number." << endl;
}

void showRectangles(struct Rectangle nameRectangle, int number)
{
	cout << "A rectangle #" << number << " has a: " << "size " << nameRectangle.Length << "x" << nameRectangle.Width <<
		" and " << nameRectangle.Color << " color." << endl;
}

void showFlights(struct Flight nameFlight, int number)
{
	cout << "Flight #" << number << ": from " << nameFlight.DeparturePoint << " to " << nameFlight.Destination << " takes "
		<< nameFlight.FlightTimeInMinutes << " minutes." << endl;
}

void showMovies(struct Movie nameMovie, int number)
{
	cout << "Movie #" << number << ": " << nameMovie.Title << " Duration: " << nameMovie.DurationInMinutes
		<< ". Release year date: " << nameMovie.TheYearOfRelease << ". Genres: " <<
		nameMovie.Genre << ". Rating: " << nameMovie.Rating << endl;
}

void showTimes(struct Time time, int number)
{
	cout << "Time #" << number << " is: " << time.clocks << ":" << time.minutes << ":" << time.seconds << endl;
}


void someRectangles()
{
	Rectangle rectangle1{ 20, 15, "blue" };
	cout << endl;
	showRectangles(rectangle1, 1);
	Rectangle rectangle2{ 30, 20, "red" };
	showRectangles(rectangle2, 2);
	Rectangle rectangle3{ 40, 40, "green" };
	showRectangles(rectangle3, 3);
}

void someFlights()
{
	Flight flight1{ "Moscow", "Tomsk", 270 };
	cout << endl;
	showFlights(flight1, 1);
	Flight flight2{ "Novosibirsk", "Omsk", 88 };
	showFlights(flight2, 2);
	Flight flight3{ "St. Petersburg", "Tyumen", 193 };
	showFlights(flight3, 3);
}

void someMovies()
{
	Movie movie1{ "King Arthur's sword.", 126, 2017, "fantasy, action, drama, adventure", 7.2 };
	cout << endl;
	showMovies(movie1, 1);
	Movie movie2{ "Two, three, demon, come!", 95, 2022, "horrors", 6.6 };
	showMovies(movie2, 2);
	Movie movie3{ "Harry Potter and the Prisoner of Azkaban.", 142, 2004, "fantasy, adventure", 8.2};
	showMovies(movie3, 3);
}

void someTimes()
{
	Time time1{ 14, 50, 47 };
	cout << endl;
	showTimes(time1, 1);
	Time time2{ 18, 30, 10 };
	showTimes(time2, 2);
	Time time3{ 8, 29, 25 };
	showTimes(time3, 3);
}

void WrongPointers()
{
	Flight flight{ "Nsk", "Tomsk", 12 };
	Movie movie{ "King Arthur's sword.", 126, 2017, "fantasy, action, drama, adventure", 7.2 };
	Flight* ptr1_fl = &flight;
	Movie* ptr1_mv = &movie;
}

void WriteRectangle(Rectangle& rectangle)
{
	cout << "\nRectangle has a size: " << rectangle.Length << "x" << rectangle.Width <<
		" and " << rectangle.Color << " color";
}

void ReadRectangle(Rectangle& rectangle)
{
	cout << "\nEnter length: ";
	cin >> rectangle.Length;
	cout << "Enter width: ";
	cin >> rectangle.Width;
	cout << "Enter color: ";
	cin >> rectangle.Color;
}

void DemoReadAndWriteRectangles()
{
	const int RECTANGLES = 5;
	Rectangle rectangles[RECTANGLES];

	for (int i = 0; i < RECTANGLES; ++i)
		ReadRectangle(rectangles[i]);

	for (int i = 0; i < RECTANGLES; ++i)
		WriteRectangle(rectangles[i]);
}

void Exchange(Rectangle& rectangle1, Rectangle& rectangle2)
{

}


int main()
{
	int x = 0;
	cout << "Enter case: ";
	cin >> x;
	switch (x)
	{
	case 1:              // Task 2.2.1.1 - 2.2.1.2
		DemoSort();      // в версии VS 2013-го года отладчик выдаёт ошибку заранее при вводе
		break;           // отриц. значения, поэтому во 2-м вызове указан массив размером 0, вместо -1
	case 2:
		DemoRectangle(); // Task 2.2.2.1: структуры Rectangle, Flight, Movie, Time
		DemoFlight();    // Task 2.2.2.2: структуры Contact, Song, Discipline
		DemoMovie();     // Task 2.2.3.1 (по заданию - нужно вызвать ф-ии чтобы проверить работоспособность, без вывода)
		DemoTime();
		break;
	case 3:
		chooseStruct();  // Task 2.2.3.2
		break;
	case 4:
		someRectangles();
		someFlights();   // Task 2.2.3.3
		someMovies();
		someTimes();
		break;
	case 5:              // Task 2.2.4.1, 2.2.4.2, 2.2.4.3 - использование указателей в структурах
		WrongPointers(); // Task 2.2.4.4
		break;
	case 6:
		DemoReadAndWriteRectangles(); // Task 2.2.5.1 - ф-я WriteRectangle // Task 2.2.5.2 - ф-я ReadRectangle
		break;                        // Task 2.2.5.3
	case 7:

		break;
	default:
		cout << "Invalid number of case.";
	}
	cout << endl << endl;
	return 0;
}
