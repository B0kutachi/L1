#include "stdafx.h"
#include <iostream>
#include <exception>
#include <string>

using namespace std;

void Sort(double* values, int count)
{
	double swap;

	if (count <= 0)
	{
		throw exception();
	}

	else
	for (int i = 0; i < count; i++)
	{
		for (int j = 0; j < count; j++)
		{
			if (values[i] < values[j])
			{
				swap = values[i];
				values[i] = values[j];
				values[j] = swap;
			}
		}
	}
}

void DemoSort()
{
	try
	{
		int count = 5;
		double* values = new double[count] { 100.0, 249.0, 12.0, 45.0, 23.5 };
		cout << "\nValues in array: " << count << endl;
		Sort(values, count);
		cout << "Sorted array:" << endl;
		for (int i = 0; i < count; i++)
			cout << values[i] << " ";
		delete[] values; values = nullptr;
	}
	catch (exception)
	{
		cout << "\nException catched!";
	}

	try
	{
		int count = 0;
		double* values = new double[count] {  };
		cout << "\n\n\nValues in array: " << count << endl;
		Sort(values, count);
		cout << "Sorted array: " << endl;
		for (int i = 0; i < count; i++)
			cout << values[i] << " ";
		delete[] values; values = nullptr;
	}
	catch (exception)
	{
		cout << "Exception catched! " << "Invalid count." << endl;
	}

}

struct Rectangle {
	double Length;
	double Width;
	string Color;
};

struct Flight {
	string DeparturePoint;
	string Destination;
	int FlightTimeInMinutes;
};

enum Genre{
	Action = 1, 
	Blockbuster,
	Comedy,
	Horror,
	Thriller,
	Fantasy,
	Drama,
	Adventure
};

struct Movie {
	string Title;
	int DurationInMinutes;
	int TheYearOfRelease;
	enum Genres {Action = 1,
		Blockbuster,
		Comedy,
		Horror,
		Thriller,
		Fantasy,
		Drama,
		Adventure};
	Genres Genre;
	double Rating;
};

struct Time {
	int clocks;
	int minutes;
	int seconds;
};

struct Contact {
	string Name;
	int PhoneNumber;
	string Email;
};

struct Song {
	string Title;
	string Creator;
	int DurationInSeconds;
};

struct Discipline {
	string Name;
	string MinimumCourse;
	int NumberOfHours;
};

struct Circle
{
	double X;
	double Y;
	double Radius;
	string Color;
};


Circle* makeCircle(double x, double y, double radius, string color)
{
	Circle* circle = new Circle;
	circle->X = x;
	circle->Y = y;
	circle->Radius = radius;
	circle->Color = color;
	return circle;
}

Circle* copyCircle(Circle* circle)
{
	Circle* copiedcircle = new Circle;
	copiedcircle->X = circle->X;
	copiedcircle->Y = circle->Y;
	copiedcircle->Radius = circle->Radius;
	copiedcircle->Color = circle->Color;
	return copiedcircle;
}

Rectangle* makeRectangle(double length, double width, string color)
{
	Rectangle* rectangle = new Rectangle;
	rectangle->Length = length;
	rectangle->Width = width;
	rectangle->Color = color;
	return rectangle;
}

Rectangle* copyRectangle(Rectangle* rectangle)
{
	Rectangle* copiedrectangle = new Rectangle;
	copiedrectangle->Length = rectangle->Length;
	copiedrectangle->Width = rectangle->Width;
	copiedrectangle->Color = rectangle->Color;
	return copiedrectangle;
}

Flight* makeFlight(string departurepoint, string destination, int flighttimeinminutes)
{
	Flight* flight = new Flight;
	flight->DeparturePoint = departurepoint;
	flight->Destination = destination;
	flight->FlightTimeInMinutes = flighttimeinminutes;
	return flight;
}

Flight* copyFlight(Flight* flight)
{
	Flight* copiedflight = new Flight;
	copiedflight->DeparturePoint = flight->DeparturePoint;
	copiedflight->Destination = flight->Destination;
	copiedflight->FlightTimeInMinutes = flight->FlightTimeInMinutes;
	return copiedflight;
}

Movie* makeMovie(string title, int durationinminutes, int theyearofrelease, Movie::Genres genre, double rating)
{
	Movie* movie = new Movie;
	movie->Title = title;
	movie->DurationInMinutes = durationinminutes;
	movie->TheYearOfRelease = theyearofrelease;
	movie->Genre = genre;
	movie->Rating = rating;
	return movie;
}

Movie* copyMovie(Movie* movie)
{
	Movie* copiedmovie = new Movie;
	copiedmovie->Title = movie->Title;
	copiedmovie->DurationInMinutes = movie->DurationInMinutes;
	copiedmovie->TheYearOfRelease = movie->TheYearOfRelease;
	copiedmovie->Genre = movie->Genre;
	copiedmovie->Rating = movie->Rating;
	return copiedmovie;
}

Time* makeTime(int clocks, int minutes, int seconds)
{
	Time* time = new Time;
	time->clocks = clocks;
	time->minutes = minutes;
	time->seconds = seconds;
	return time;
}

Time* copyTime(Time* time)
{
	Time* copiedtime = new Time;
	copiedtime->clocks = time->clocks;
	copiedtime->minutes = time->minutes;
	copiedtime->seconds = time->seconds;
	return copiedtime;
}


void DemoRectangle1()
{
	Rectangle rectangle1{ 20, 15, "blue" };
	Rectangle* ptr1_rect1 = &rectangle1;
	Rectangle* ptr2_rect1 = &rectangle1;
	cout << "\nEnter length of rectangle: ";
	cin >> ptr1_rect1->Length;
	cout << "Enter width of rectangle: ";
	cin >> ptr1_rect1->Width;
	cout << "Enter color of rectangle: ";
	cin >> ptr1_rect1->Color;
	cout << "A rectangle has a: " << "size " << ptr1_rect1->Length << "x" << ptr1_rect1->Width << 
		" and " << ptr1_rect1->Color << " color." << endl;
	cout << "\nAddress of ptr1: " << ptr1_rect1;
	cout << "\nAddress of ptr2: " << ptr2_rect1 << endl;
}

void DemoFlight()
{
	Flight flight1{ "Moscow", "Tomsk", 270 };
	Flight* ptr1_fl1 = &flight1;
	Flight* ptr2_fl1 = &flight1;
	cout << "\nEnter point of departure: ";
	cin >> ptr1_fl1->DeparturePoint;
	cout << "Enter point of destination: ";
	cin >> ptr1_fl1->Destination;
	cout << "Enter flight time in minutes: ";
	cin >> ptr1_fl1->FlightTimeInMinutes;
	cout << "\nFlight: " << "from " << ptr1_fl1->DeparturePoint << " to " << ptr1_fl1->Destination << " takes " 
		<< ptr1_fl1->FlightTimeInMinutes << " minutes." << endl;
	cout << "\nAddress of ptr1: " << ptr1_fl1;
	cout << "\nAddress of ptr2: " << ptr2_fl1 << endl;
}

void DemoMovie()
{
	Movie movie1{ "King Arthur's sword", 126, 2017, Movie::Adventure, 7.2 };
	Movie* ptr1_mv1 = &movie1;
	Movie* ptr2_mv1 = &movie1;
	cout << "\nEnter title of movie: ";
	cin.ignore(32767, '\n');
	getline(cin, ptr1_mv1->Title);
	cout << "Enter duration of movie(in minutes): ";
	cin >> ptr1_mv1->DurationInMinutes;
	cout << "Enter release year date: ";
	cin >> ptr1_mv1->TheYearOfRelease;
	cout << "Enter genre of movie (1-8 for Action, Blockbuster, Comedy, Horror, Thriller, Fantasy, Drama, Adventure): ";
	int genre;
	cin >> genre;
	ptr1_mv1->Genre = static_cast<Movie::Genres>(genre);
	cout << "Enter rating of movie: ";
	cin >> ptr1_mv1->Rating;
	cout << "\nMovie: " << ptr1_mv1->Title << "\nDuration: " << ptr1_mv1->DurationInMinutes <<
		"\nRelease year date: " << ptr1_mv1->TheYearOfRelease << "\nGenres: ";
	switch (ptr1_mv1->Genre)
	{
	case 1:
		cout << "Action ";
		break;
	case 2:
		cout << "Blockbuster ";
		break;
	case 3:
		cout << "Comedy ";
		break;
	case 4:
		cout << "Horror ";
		break;
	case 5:
		cout << "Thriller ";
		break;
	case 6:
		cout << "Fantasy ";
		break;
	case 7:
		cout << "Drama ";
		break;
	case 8:
		cout << "Adventure ";
		break;
	}
	cout << "\nRating: " << ptr1_mv1->Rating << endl;

	cout << "\nAddress of ptr1: " << ptr1_mv1;
	cout << "\nAddress of ptr2: " << ptr2_mv1 << endl;
}

void DemoTime()
{
	Time time1{ 18, 30, 49 };
	Time* ptr1_time1 = &time1;
	Time* ptr2_time1 = &time1;
	cout << "\nEnter an hour: ";
	cin >> ptr1_time1->clocks;
	cout << "Enter minutes: ";
	cin >> ptr1_time1->minutes;
	cout << "Enter seconds: ";
	cin >> ptr1_time1->seconds;
	cout << "Time is: " << ptr1_time1->clocks << ":" << ptr1_time1->minutes << ":" << ptr1_time1->seconds << endl;
	cout << "\nAddress of ptr1: " << ptr1_time1;
	cout << "\nAddress of ptr2: " << ptr2_time1 << endl;
}

void chooseStruct()
{
	int y = 0;
	cout << "\nChoose what you want to enter: 1: rectangle, 2: flight, 3: movie, 4: time." << endl;
	cin >> y;
	if (y == 1) 
		DemoRectangle1();
	if (y == 2)
		DemoFlight();
	if (y == 3)
		DemoMovie();
	if (y == 4)
		DemoTime();
	if (y > 4 || y < 1)
		cout << "Invalid number." << endl;
}

void showRectangles(struct Rectangle nameRectangle, int number)
{
	cout << "A rectangle #" << number << " has a: " << "size " << nameRectangle.Length << "x" << nameRectangle.Width <<
		" and " << nameRectangle.Color << " color." << endl;
}

void showFlights(struct Flight nameFlight, int number)
{
	cout << "Flight #" << number << ": from " << nameFlight.DeparturePoint << " to " << nameFlight.Destination << " takes "
		<< nameFlight.FlightTimeInMinutes << " minutes." << endl;
}

void showMovies(Movie& namemovie, int number)
{
	Movie* nameMovie = &namemovie;
	cout << "Movie #" << number << ": " << namemovie.Title << " Duration: " << namemovie.DurationInMinutes
		<< ". Release year date: " << namemovie.TheYearOfRelease << ". Genre: ";
	switch (namemovie.Genre)
	{
	case 1:
		cout << "Action ";
		break;
	case 2:
		cout << "Blockbuster ";
		break;
	case 3:
		cout << "Comedy ";
		break;
	case 4:
		cout << "Horror ";
		break;
	case 5:
		cout << "Thriller ";
		break;
	case 6:
		cout << "Fantasy ";
		break;
	case 7:
		cout << "Drama ";
		break;
	case 8:
		cout << "Adventure ";
		break;
	}
	cout << ". Rating: " << namemovie.Rating << endl;
}

void showTimes(struct Time time, int number)
{
	cout << "Time #" << number << " is: " << time.clocks << ":" << time.minutes << ":" << time.seconds << endl;
}


void someRectangles()
{
	Rectangle rectangle1{ 20, 15, "blue" };
	cout << endl;
	showRectangles(rectangle1, 1);
	Rectangle rectangle2{ 30, 20, "red" };
	showRectangles(rectangle2, 2);
	Rectangle rectangle3{ 40, 40, "green" };
	showRectangles(rectangle3, 3);
}

void someFlights()
{
	Flight flight1{ "Moscow", "Tomsk", 270 };
	cout << endl;
	showFlights(flight1, 1);
	Flight flight2{ "Novosibirsk", "Omsk", 88 };
	showFlights(flight2, 2);
	Flight flight3{ "St. Petersburg", "Tyumen", 193 };
	showFlights(flight3, 3);
}

void someMovies()
{
	Movie movie1{ "King Arthur's sword.", 126, 2017, Movie::Adventure, 7.2 };
	cout << endl;
	showMovies(movie1, 1);
	Movie movie2{ "Two, three, demon, come!", 95, 2022, Movie::Horror, 6.6 };
	showMovies(movie2, 2);
	Movie movie3{ "Harry Potter and the Prisoner of Azkaban.", 142, 2004, Movie::Fantasy, 8.2};
	showMovies(movie3, 3);
}

void someTimes()
{
	Time time1{ 14, 50, 47 };
	cout << endl;
	showTimes(time1, 1);
	Time time2{ 18, 30, 10 };
	showTimes(time2, 2);
	Time time3{ 8, 29, 25 };
	showTimes(time3, 3);
}

void WrongPointers()
{
	Flight flight{ "Nsk", "Tomsk", 12 };
	Movie movie{ "King Arthur's sword.", 126, 2017, Movie::Adventure, 7.2 };
	Flight* ptr1_fl = &flight;
	Movie* ptr1_mv = &movie;
	cout << "\nSuccessfully launched.";
}

void WriteRectangle(Rectangle& rectangle)
{
	cout << "\nRectangle has a size: " << rectangle.Length << "x" << rectangle.Width <<
		" and " << rectangle.Color << " color";
}

void ReadRectangle(Rectangle& rectangle)
{
	cout << "\nEnter length: ";
	cin >> rectangle.Length;
	cout << "Enter width: ";
	cin >> rectangle.Width;
	cout << "Enter color: ";
	cin >> rectangle.Color;
}

void DemoReadAndWriteRectangles()
{
	const int RECTANGLES = 5;
	Rectangle rectangles[RECTANGLES];

	for (int i = 0; i < RECTANGLES; ++i)
		ReadRectangle(rectangles[i]);

	for (int i = 0; i < RECTANGLES; ++i)
		WriteRectangle(rectangles[i]);
}

void Exchange(Rectangle& rectangle1, Rectangle& rectangle2)
{
	Rectangle* rect1 = &rectangle1;
	Rectangle* rect2 = &rectangle2;
	double len1, len2, width1, width2;
	string color1, color2;
	len1 = rect1->Length; len2 = rect2->Length;
	width1 = rect1->Width; width2 = rect2->Width;
	color1 = rect1->Color; color2 = rect2->Color;
	
	rect1->Length = len2; rect2->Length = len1;
	rect1->Width = width2; rect2->Width = width1;
	rect1->Color = color2; rect2->Color = color1;

}

void DemoRectangle2()
{
	Rectangle rectangle1{ 15, 20, "green" };
	Rectangle rectangle2{ 30, 40, "purple" };
	cout << "\nRectangle 1 before Exchange: ";
	WriteRectangle(rectangle1);
	cout << "\nRectangle 2 before Exchange: ";
	WriteRectangle(rectangle2);

	Exchange(rectangle1, rectangle2);

	cout << "\n\nRectangle 1 after Exchange: ";
	WriteRectangle(rectangle1);
	cout << "\nRectangle 2 after Exchange: ";
	WriteRectangle(rectangle2);
}

void FindRectangle(Rectangle* rectangles, int count)
{
	double max_length = 0, width = 0;

	for (int i = 0; i < count; i++) {
		if (rectangles[i].Length > max_length) {
			max_length = rectangles[i].Length;
			width = rectangles[i].Width;
		}
	}
	cout << "\n\nThe rectangle with maximum length has the size: " << max_length << "x" << width;
}

void DemoRectangle3()
{
	const int size = 3;
	Rectangle rectangles[size]{{ 15, 30, "no" }, { 90, 40, "no" }, { 30, 95, "no" } };

	for (int i = 0; i < size; i++)
		WriteRectangle(rectangles[i]);

	FindRectangle(rectangles, size);
}

void FindMaxRectangle(Rectangle* rectangles, int count)
{
	double max_square = 0, length = 0, width = 0;

	for (int i = 0; i < count; i++) {
		if ((rectangles[i].Length * rectangles[i].Width) > max_square) {
			max_square = rectangles[i].Length * rectangles[i].Width;
			length = rectangles[i].Length;
			width = rectangles[i].Width;
		}
	}
	cout << "\n\nThe rectangle with the maximum square has the size: " << length << "x" << width;
}

void DemoRectangle4()
{
	const int size = 3;
	Rectangle rectangles[size]{{ 15, 30, "no" }, { 90, 40, "no" }, { 30, 95, "no" } };

	for (int i = 0; i < size; i++)
		WriteRectangle(rectangles[i]);

	FindMaxRectangle(rectangles, 3);
}

void DemoDynamicFlight()
{
	Flight* flight = new Flight;
	
	flight->DeparturePoint = "Tomsk";
	flight->Destination = "Moscow";
	flight->FlightTimeInMinutes = 70;

	cout << "\nThe flight " << flight->DeparturePoint << " - " << flight->Destination
		<< " is in flight for " << flight->FlightTimeInMinutes << " minutes.";

	delete flight; flight = nullptr;
}

void FindShortestFlight(Flight* flights, int count)
{
	int shortestflight = flights[0].FlightTimeInMinutes;
	int number = 0;

	for (int i = 1; i < count; i++) {
		if ((flights[i].FlightTimeInMinutes) < shortestflight) {
			shortestflight = flights[i].FlightTimeInMinutes;
			number = i;
		}
	}

	cout << "\n\nThe shortest flight is #" << number+1 << ": " << flights[number].DeparturePoint << " - "
		<< flights[number].Destination << " is in flight for " << shortestflight << " minutes.";
}

void DemoDynamicFlights()
{
	const int size = 4;
	Flight* flight = new Flight[size];
	
	flight[0] = { "Tomsk", "Moscow", 160 };
	flight[1] = { "Moscow", "Novosibirsk", 180 };
	flight[2] = { "Omsk", "Tyumen", 90 };
	flight[3] = { "Omsk", "St. Petersburg ", 120 };
	
	for (int i = 0; i < size; i++) {
		cout << "\nThe flight #" << i+1 << ": " << flight[i].DeparturePoint << " - " << flight[i].Destination
			<< " is in flight for " << flight[i].FlightTimeInMinutes << " minutes.";
	}

	FindShortestFlight(flight, size);

	delete[] flight; flight = nullptr;
}

void DemoCircle()
{

	Circle* circle1 = makeCircle(5.0, 7.0, 7.5, "Red");
	Circle* circle2 = makeCircle(2.0, -12.0, 12.75, "Green");
	Circle* circle3 = makeCircle(-10.0, 10.0, 1.45, "Blue");

	Circle* copiedCircle1 = copyCircle(circle1);
	Circle* copiedCircle2 = copyCircle(circle2);
	Circle* copiedCircle3 = copyCircle(circle3);

	cout << "\nSuccessfully copied.";

	delete circle1; circle1 = nullptr;
	delete circle2; circle2 = nullptr;
	delete circle3; circle3 = nullptr;

	delete copiedCircle1; copiedCircle1 = nullptr;
	delete copiedCircle2; copiedCircle2 = nullptr;
	delete copiedCircle3; copiedCircle3 = nullptr;
}

void MakeStructs()
{
	Rectangle* rectangle = makeRectangle(15, 20, "blue");
	cout << "\nRectangle: " << rectangle->Length << "x" << rectangle->Width << " Color: " << rectangle->Color;

	Flight* flight = makeFlight("Tomsk", "Moscow", 200);
	cout << "\nFlight: " << flight->DeparturePoint << " - "
		<< flight->Destination << " Time: " << flight->FlightTimeInMinutes;

	Movie* movie = makeMovie("King Arthur's sword", 126, 2017, Movie::Action, 10);
	cout << "\nMovie: " << movie->Title << " Duration: " << movie->DurationInMinutes << " Release: " <<
		movie->TheYearOfRelease << " Genre: ";
	switch (movie->Genre)
	{
	case 1:
		cout << "Action ";
		break;
	case 2:
		cout << "Blockbuster ";
		break;
	case 3:
		cout << "Comedy ";
		break;
	case 4:
		cout << "Horror ";
		break;
	case 5:
		cout << "Thriller ";
		break;
	case 6:
		cout << "Fantasy ";
		break;
	case 7:
		cout << "Drama ";
		break;
	case 8:
		cout << "Adventure ";
		break;
	}
		cout << "Rating: " << movie->Rating;

	Time* time = makeTime(18, 30, 47);
	cout << "\nTime is: " << time->clocks << ":" << time->minutes << ":" << time->seconds;

	delete rectangle; rectangle = nullptr;
	delete flight; flight = nullptr;
	delete time; time = nullptr;
}

void CopyStructs()
{
	Rectangle* rectangle = makeRectangle(15, 20, "blue");
	Rectangle* rectangle2;
	rectangle2 = copyRectangle(rectangle);
	cout << "\nCopied rectangle: " << rectangle2->Length << "x" << rectangle2->Width << " Color: " << rectangle2->Color;

	Flight* flight = makeFlight("Tomsk", "Moscow", 200);
	Flight* flight2;
	flight2 = copyFlight(flight);
	cout << "\nCopied flight: " << flight2->DeparturePoint << " - "
		<< flight2->Destination << " Time: " << flight2->FlightTimeInMinutes;

	Movie* movie = makeMovie("King Arthur's sword", 126, 2017, Movie::Action, 10);
	Movie* movie2;
	movie2 = copyMovie(movie);
	cout << "\nCopied movie: " << movie2->Title << " Duration: " << movie2->DurationInMinutes << " Release: " <<
		movie2->TheYearOfRelease << " Genre: ";
	switch (movie2->Genre)
	{
	case 1:
		cout << "Action ";
		break;
	case 2:
		cout << "Blockbuster ";
		break;
	case 3:
		cout << "Comedy ";
		break;
	case 4:
		cout << "Horror ";
		break;
	case 5:
		cout << "Thriller ";
		break;
	case 6:
		cout << "Fantasy ";
		break;
	case 7:
		cout << "Drama ";
		break;
	case 8:
		cout << "Adventure ";
		break;
	}
		cout << "Rating: " << movie2->Rating;

	Time* time = makeTime(18, 30, 47);
	Time* time2;
	time2 = copyTime(time);
	cout << "\nCopied time is: " << time2->clocks << ":" << time2->minutes << ":" << time2->seconds;

	delete rectangle; rectangle = nullptr;
	delete rectangle2; rectangle2 = nullptr;
	delete flight; flight = nullptr;
	delete flight2; flight2 = nullptr;
	delete movie; movie = nullptr;
	delete movie2; movie2 = nullptr;
	delete time; time = nullptr;
	delete time2; time2 = nullptr;
}

enum Color {
	Red = 1,
	Yellow,
	Orange,
	Green,
	LightBlue,
	DarkBlue,
	Purple
};

enum Day {
	Monday = 1,
	Tuesday,
	Wednesday,
	Thursday,
	Friday,
	Saturday,
	Sunday
};

enum Education {
	FullTime,
	PartTime,
	Evening,
	DistanceLearning
};

enum Smartphone {
	Apple,
	Samsung,
	Realme,
	Xiaomi
};

enum Season {
	Spring,
	Autumn,
	Summer,
	Winter
};

void DemoEnums()
{
	Color colors[6] = { Red, Yellow, Orange, Green, LightBlue, DarkBlue, };
	Day days[6] = { Monday, Tuesday, Wednesday, Thursday, Friday, Saturday };
	Genre genre[6] = { Comedy, Drama, Thriller, Action, Horror, Blockbuster };
	Education education[4] = { FullTime, PartTime, Evening, DistanceLearning };
	Smartphone smartphones[4] = { Apple, Samsung, Realme, Xiaomi };
	Season seasons[4] = { Spring, Autumn, Summer, Winter };
}

void WriteColor(Color color)
{
	int x = color;
	switch (x)
	{
	case Red:
		cout << "\nRed color" << endl;
		break;
	case Yellow:
		cout << "\nYellow color" << endl;
		break;
	case Orange:
		cout << "\nOrange color" << endl;
		break;
	case Green:
		cout << "\nGreen color" << endl;
		break;
	case LightBlue:
		cout << "\nLight Blue color" << endl;
		break;
	case DarkBlue:
		cout << "\nDark Blue color" << endl;
		break;
	case Purple:
		cout << "\nPurple color" << endl;
		break;
	}
}

Color ReadColor() {
	int color;
	cout << "\nEnter number 1-7 (1 - red, 2 - yellow, 3 - orange, 4 - green, 5 - light blue, 6 - dark blue, 7 - purple)";
	cin >> color;
	switch (color)
	{
	case 1:
		return Red;
		break;
	case 2:
		return Yellow;
		break;
	case 3:
		return Orange;
		break;
	case 4:
		return Green;
		break;
	case 5:
		return LightBlue;
		break;
	case 6:
		return DarkBlue;
		break;
	case 7:
		return Purple;
		break;
	default:
		cout << "Invalid color. Returned red color.";
		return Red;
	}
}

int CountRed(Color* colors, int count)
{
	int valueofred = 0;
	for (int i = 0; i < count; i++) {
		if (colors[i] == Red) {
			valueofred += 1;
		}
	}
	return valueofred;
}

int CountColor(Color* colors, int count, Color findedColor)
{
	int valuefind = 0;
	for (int i = 0; i < count; ++i) {
		if (colors[i] == findedColor) {
			valuefind += 1;
		}
	}
	cout << valuefind << " ";
	switch (findedColor)
	{
	case 1:
		cout << "Red";
		break;
	case 2:
		cout << "Yellow";
		break;
	case 3:
		cout << "Orange";
		break;
	case 4:
		cout << "Green";
		break;
	case 5:
		cout << "LightBlue";
		break;
	case 6:
		cout << "DarkBlue";
		break;
	case 7:
		cout << "Purple";
		break;
	default:
		cout << "Invalid color. Returned red color.";
		return Red;
	}
	cout << " colors found";
	return valuefind;
}

void demoCountColor()
{
	
	Color colors[8] {Red, Green, Purple, Orange, Green, Green, DarkBlue, Green};
	CountColor(colors, 8, Green);
}

int CountMoviesByGenre(Movie* movies, int count, int findGenre)
{
	int findcount = 0;
	double maxrating = 0.0;
	for (int i = 0; i < count; i++) {
		if (movies[i].Genre == findGenre) {
			findcount++;
			if (movies[i].Rating > maxrating) {
				maxrating = movies[i].Rating;
			}
		}
	}

	return findcount;
}

void DemoMovieWithGenre()
{
	Movie movie00{ "Kings", 25, 2014, Movie::Action, 9.8 };
	Movie* movie000 = makeMovie("\nKing Arthur's sword", 126, 2017, Movie::Adventure, 9.9);

	Movie* movies = new Movie[10];
	movies[0] = { "Movie 1", 140, 2020, Movie::Adventure, 7.3 };
	movies[1] = { "Movie 2", 119, 2018, Movie::Fantasy, 6.1 };
	movies[2] = { "Movie 3", 136, 2013, Movie::Action, 5.3 };
	movies[3] = { "Movie 4", 117, 2017, Movie::Adventure, 7.9 };
	movies[4] = { "Movie 5", 109, 2023, Movie::Drama, 8.8 };
	movies[5] = { "Movie 6", 123, 2009, Movie::Thriller, 8.9 };
	movies[6] = { "Movie 7", 128, 2007, Movie::Comedy, 9.2 };
	movies[7] = { "Movie 8", 116, 2012, Movie::Adventure, 8.6 };
	movies[8] = { "Movie 9", 133, 2019, Movie::Action, 9.4 };
	movies[9] = { "Movie 10", 120, 2013, Movie::Adventure, 8.1 };

	int count = CountMoviesByGenre(movies, 10, Adventure);

	cout << "\nFound " << count << " movies with genre Adventure";


	delete movie000; movie000 = nullptr;
	delete[] movies; movies = nullptr;
}

Movie* FindBestGenreMovie(Movie* movies, int count, Genre findGenre)
{
	Movie* bestmovie = new Movie;

	int countt = 0;
	double maxrating = 0.0;
	for (int i = 0; i < count; i++) {
		if (movies[i].Genre == findGenre) {
			countt++;
			if (movies[i].Rating > maxrating) {
				maxrating = movies[i].Rating;
				bestmovie->Title = movies[i].Title;
				bestmovie->DurationInMinutes = movies[i].DurationInMinutes;
				bestmovie->TheYearOfRelease = movies[i].TheYearOfRelease;
				bestmovie->Genre = movies[i].Genre;
				bestmovie->Rating = movies[i].Rating;
			}
		}

	}
	return bestmovie;
}

void BestGenre()
{
	Movie* movies = new Movie[10];
	movies[0] = { "Movie #1", 140, 2020, Movie::Adventure, 7.3 };
	movies[1] = { "Movie #2", 119, 2018, Movie::Fantasy, 6.1 };
	movies[2] = { "Movie #3", 136, 2013, Movie::Action, 5.3 };
	movies[3] = { "Movie #4", 117, 2017, Movie::Adventure, 7.9 };
	movies[4] = { "Movie #5", 109, 2023, Movie::Drama, 8.8 };
	movies[5] = { "Movie #6", 123, 2009, Movie::Thriller, 8.9 };
	movies[6] = { "Movie #7", 128, 2007, Movie::Comedy, 9.2 };
	movies[7] = { "Movie #8", 116, 2012, Movie::Adventure, 8.6 };
	movies[8] = { "Movie #9", 133, 2019, Movie::Action, 9.4 };
	movies[9] = { "Movie #10", 120, 2013, Movie::Adventure, 8.1 };

	Movie* movie = FindBestGenreMovie(movies, 10, Adventure);
	cout << movie->Title << " Duration: " << movie->DurationInMinutes << " Release: " <<
		movie->TheYearOfRelease << " Genre: ";
	switch (movie->Genre)
	{
	case 1:
		cout << "Action ";
		break;
	case 2:
		cout << "Blockbuster ";
		break;
	case 3:
		cout << "Comedy ";
		break;
	case 4:
		cout << "Horror ";
		break;
	case 5:
		cout << "Thriller ";
		break;
	case 6:
		cout << "Fantasy ";
		break;
	case 7:
		cout << "Drama ";
		break;
	case 8:
		cout << "Adventure ";
		break;
	}
		
	cout << "Rating: " << movie->Rating;

	delete[] movies; movies = nullptr;
}


int main()
{
	int x = 0;
	cout << "Enter case: ";
	cin >> x;
	switch (x)
	{
	case 1:              // Task 2.2.1.1 - 2.2.1.2
		DemoSort();      // в версии VS 2013-го года отладчик выдаёт ошибку заранее при вводе
		break;           // отриц. значения, поэтому во 2-м вызове указан массив размером 0, вместо -1
	case 2:
		DemoRectangle1(); // Task 2.2.2.1: структуры Rectangle, Flight, Movie, Time
		DemoFlight();     // Task 2.2.2.2: структуры Contact, Song, Discipline
		DemoMovie();      // Task 2.2.3.1 (по заданию - нужно вызвать ф-ии чтобы проверить работоспособность, без вывода)
		DemoTime();
		break;
	case 3:
		chooseStruct();   // Task 2.2.3.2
		break;
	case 4:
		someRectangles();
		someFlights();    // Task 2.2.3.3
		someMovies();
		someTimes();
		break;
	case 5:               // Task 2.2.4.1, 2.2.4.2, 2.2.4.3 - использование указателей в структурах
		WrongPointers();  // Task 2.2.4.4
		break;
	case 6:
		DemoReadAndWriteRectangles(); // Task 2.2.5.1 - ф-я WriteRectangle // Task 2.2.5.2 - ф-я ReadRectangle
		break;                        // Task 2.2.5.3
	case 7:
		DemoRectangle2();        // Task 2.2.5.4
		break;
	case 8:
		DemoRectangle3();        // Task 2.2.5.5
		break;
	case 9:
		DemoRectangle4();        // Task 2.2.5.6
		break;
	case 10:
		DemoDynamicFlight();     // Task 2.2.6.1
		break;
	case 11:
		DemoDynamicFlights();    // Task 2.2.6.2
		break;
	case 12:
		DemoDynamicFlights();    // Task 2.2.6.3
		break;
	case 13:
		DemoCircle();            // Task 2.2.7.1
		break;
	case 14:
		MakeStructs();           // Task 2.2.7.2
		break;
	case 15:
		CopyStructs();           // Task 2.2.7.3
		break;
	case 16:
		demoCountColor();        // Task 2.2.8.8
		break;
	case 17:
		DemoMovieWithGenre();    // Task 2.2.9.4
		break;
	case 18:
		BestGenre();             // Task 2.2.9.5
		break;
	default:
		cout << "Invalid number of case.";
	}
	cout << endl << endl;
	return 0;
}
