#include "stdafx.h"
#include <iostream>
#include <exception>
#include <string>

using namespace std;

void Sort(double* values, int count)
{
	double swap;

	if (count <= 0)
	{
		throw exception();
	}

	else
	for (int i = 0; i < count; i++)
	{
		for (int j = 0; j < count; j++)
		{
			if (values[i] < values[j])
			{
				swap = values[i];
				values[i] = values[j];
				values[j] = swap;
			}
		}
	}
}

void DemoSort()
{
	try
	{
		int count = 5;
		double* values = new double[count] { 100.0, 249.0, 12.0, 45.0, 23.5 };
		cout << "\nValues in array: " << count << endl;
		Sort(values, count);
		cout << "Sorted array:" << endl;
		for (int i = 0; i < count; i++)
			cout << values[i] << " ";
		delete[] values; values = nullptr;
	}
	catch (const exception& ex)
	{
		cout << "\nException catched!";
	}

	try
	{
		int count = 0;
		double* values = new double[count] {  };
		cout << "\n\n\nValues in array: " << count << endl;
		Sort(values, count);
		cout << "Sorted array: " << endl;
		for (int i = 0; i < count; i++)
			cout << values[i] << " ";
		delete[] values; values = nullptr;
	}
	catch (const exception& ex)
	{
		cout << "Exception catched! " << "Invalid count." << endl;
	}
}

struct Rectangle {
	double Length;
	double Width;
	string Color;
};

struct Flight {
	string DeparturePoint;
	string Destination;
	int FlightTimeInMinutes;
};

struct Movie {
	string Title;
	int DurationInMinutes;
	int TheYearOfRelease;
	string Genre;
	double Rating;
};

struct Time {
	int clocks;
	int minutes;
	int seconds;
};

struct Contact {
	string Name;
	int PhoneNumber;
	string Email;
};

struct Song {
	string Title;
	string Creator;
	int DurationInSeconds;
};

struct Discipline {
	string Name;
	string MinimumCourse;
	int NumberOfHours;
};

void DemoRectangle()
{
	Rectangle rectangle1{ 20, 15, "blue" };
	cout << "\nEnter length of rectangle: ";
	cin >> rectangle1.Length;
	cout << "Enter width of rectangle: ";
	cin >> rectangle1.Width;
	cout << "Enter color of rectangle: ";
	cin >> rectangle1.Color;
	cout << "A rectangle has a: " << "size " << rectangle1.Length << "x" << rectangle1.Width << 
		" and " << rectangle1.Color << " color." << endl;
}

void DemoFlight()
{
	Flight flight1{ "Moscow", "Tomsk", 270 };
	cout << "\nEnter point of departure: ";
	cin >> flight1.DeparturePoint;
	cout << "Enter point of destination: ";
	cin >> flight1.Destination;
	cout << "Enter flight time in minutes: ";
	cin >> flight1.FlightTimeInMinutes;

	cout << "\nFlight: " << "from " << flight1.DeparturePoint << " to " << flight1.Destination << " takes " 
		<< flight1.FlightTimeInMinutes << " minutes." << endl;
}

void DemoMovie()
{
	Movie movie1{ "King Arthur's sword", 126, 2017, "fantasy, action, drama, adventure", 7.2};
	cout << "\nEnter title of movie: ";
	cin.ignore(32767, '\n');
	getline(cin, movie1.Title);
	cout << "Enter duration of movie(in minutes): ";
	cin >> movie1.DurationInMinutes;
	cout << "Enter release year date: ";
	cin >> movie1.TheYearOfRelease;
	cout << "Enter genres of movie: ";
	cin.ignore(32767, '\n');
	getline(cin, movie1.Genre);
	cout << "Enter rating of movie: ";
	cin >> movie1.Rating;
	cout << "\nMovie: " << movie1.Title << endl << "Duration: " << movie1.DurationInMinutes << endl 
		<< "Release year date: " << movie1.TheYearOfRelease << endl << "Genres: " <<
			movie1.Genre << endl << "Rating: " << movie1.Rating << endl;
}

void DemoTime()
{
	Time time1{ 18, 30, 49 };
	//cout << "Time: " << time1.clocks << ":" << time1.minutes << ":" << time1.seconds << endl;
}

void chooseStruct()
{
	int y = 0;
	cout << "\nChoose what you want to enter: 1: rectangle, 2: flight, 3: movie, 4: time." << endl;
	cin >> y;
	if (y == 1) 
		DemoRectangle();
	if (y == 2)
		DemoFlight();
	if (y == 3)
		DemoMovie();
	if (y == 4)
		DemoTime();
	if (y > 4 | y < 1)
		cout << "Invalid number." << endl;
}



int main()
{
	int x = 0;
	cout << "Enter case: ";
	cin >> x;
	switch (x)
	{
	case 1:              // Task 2.2.1.1 - 2.2.1.2
		DemoSort();      // в версии VS 2013-го года отладчик выдаёт ошибку заранее при вводе
		break;           // отриц. значения, поэтому во 2-м вызове указан массив размером 0, вместо -1
	case 2:
		DemoRectangle(); // Task 2.2.2.1: структуры Rectangle, Flight, Movie, Time
		DemoFlight();    // Task 2.2.2.2: структуры Contact, Song, Discipline
		DemoMovie();     // Task 2.2.3.1 (по заданию - нужно вызвать ф-ии чтобы проверить работоспособность, без вывода)
		DemoTime();
		break;
	case 3:
	{
		chooseStruct();  // Task 2.2.3.2
		break;
	}
	default:
		cout << "Invalid number of case.";
	}
	cout << endl << endl;
	return 0;
}
