#include "stdafx.h"
#include <iostream>
#include <array>
#include <string>
#include <algorithm>
#include <math.h>

using namespace std;


void Output_array(int arr[], int size)
{
	for (int i = 0; i < size; i++)
		cout << arr[i] << " ";
	cout << endl;
}

void Bubblesort(int arr[], int size)
{
	for (int i = 0; i < size - 1; i++)
	for (int j = 0; j < size - 1; j++)
	if (arr[j] > arr[j + 1])
	{
		int buf = arr[j];
		arr[j] = arr[j + 1];
		arr[j + 1] = buf;
	}
}

double GetPower(double base, int exponent)
{
	double result = 1.0;
	for (int i = 1; i <= exponent; i++)
		result *= base;
	return(result);
}

void DemoGetPower(double base, int exponent)
{
	cout << base << " ^ " << exponent << " = " << GetPower(base, exponent);
}

void RoundToTens(int& value)
{
	int notvalue = value % 10, startvalue = value;
	if (notvalue < 5)
		value = (value / 10) * 10;
	else
		value = (value / 10) * 10 + 10;
	cout << "For " << startvalue << " rounded value is " << value << endl;
}

void Foo1(double a)
{
	cout << "Address of a in Foo1(): " << &a << endl;
	cout << "Value of a in Foo1(): " << a << endl;

	a = 15.0;
	cout << "New value of a in Foo1(): " << a << endl;
}

void Foo2(double& a)
{
	cout << "Address of a in Foo2(): " << &a << endl;
	cout << "Value of a in Foo2(): " << a << endl;
	a = 15.0;
	cout << "New value of a in Foo2(): " << a << endl;
}

void Foo3(double* a)
{
	cout << "Address in pointer: " << a << endl;
	cout << "Address of pointer: " << &a << endl;
	cout << "Value in pointer address: " << *a << endl;

	*a = 15.0;
	cout << "New value in pointer address: " << *a << endl;
}


void Breakpoints1()
{
	double add = 1.0;
	double sum = 0.0;
	for (int i = 0; i < 10; i++)
	{
		sum += add * i;
		add *= 1.1;
	}
	cout << "Total sum is " << sum << endl;
}

void Breakpoints2()
{
	double add = 1.0;
	double sum = 0.0;
	for (int i = 0; i < 1000; i++)
	{
		sum += add * i; // Поставьте условную точку останова здесь
		if (i % 3 == 0)
		{
			add *= 1.1;
		}
		else
		{
			add /= 3.0;
		}
	}
	cout << "Total sum is " << sum << endl;
}

void Breakpoints3()
{
	int Array[10] {10, -4, 21, 37, 41, 82, -11, 0, 92, 56};
	cout << "Your array is: ";
	Output_array(Array, 10);
	cout << "Sorted array is: ";
	Bubblesort(Array, 10); 	Output_array(Array, 10);
}

void Breakpoints4()
{
	double Array[13] {99.1, 38.3, 91.4, -14,7, 7.2, 352.2, -98.9, 60.7, 167.4, 120.9, 211.1, 17.1};
	cout << "\nYour source array is: \n";
	for (int i = 0; i < 13; i++)
		cout << Array[i] << " ";
	cout << "\n\nEnter searching value: ";
	int searchingValue, elements = 0; cin >> searchingValue;
	for (int i = 0; i < 13; i++)
	if (Array[i] >= searchingValue)
		elements += 1;
	cout << "\nElements of array more than " << searchingValue << " is: " << elements;
}

void Breakpoints5()
{
	int i = 0;
	char Array[9] {"abcd4E#r"};
	cout << "Your array is: ";
	for (int i = 0; i < 8; i++)
		cout << Array[i] << " ";
	cout << endl << "All letters in your array: ";
	for (i = 0; i < 8; i++)
	if ((Array[i] >= 'a' && Array[i] <= 'z') || (Array[i] >= 'A' && Array[i] <= 'Z'))
		cout << Array[i];
}

void Breakpoints6()
{
	cout << "\n3.0 ^ 4 = " << GetPower(3.0, 4);
	cout << "\n2.0 ^ 6 = " << GetPower(2.0, 6);
	cout << "\n-4.0 ^ 3 = " << GetPower(-4.0, 3);
}

void Breakpoints7()
{
	int s = 14, m = 191, f = 27;
	RoundToTens(s); RoundToTens(m); RoundToTens(f);
	cout << s;
}

void Breakpoints8()
{
	int a = 5;
	int b = 4;
	cout << "Address of a: " << &a << endl;
	cout << "Address of b: " << &b << endl;

	double c = 13.5;
	cout << "Address of c: " << &c << endl;

	bool d = true;
	cout << "Address of d: " << &d << endl;
}

void Breakpoints9()
{
	int a[10] = { 1, 2, 7, -1, 5, 3, -1, 7, 1, 6 };
	cout << "Size of int type: " << sizeof(int) << endl;
	for (int i = 0; i < 10; i++)
	{
		cout << "Address of a[" << i << "]: " << &a[i] << endl;
	}

	cout << endl;
	cout << "Size of double type: " << sizeof(double) << endl;
	double b[10] = { 1.0, 2.0, 7.0, -1.0, 5.0, 3.5, -1.8, 7.2, 1.9, 6.2 };
	for (int i = 0; i < 10; i++)
	{
		cout << "Address of b[" << i << "]: " << &b[i] << endl;
	}
}

void Breakpoints10()
{
	int a = 5;
	int& b = a;

	cout << "Address of a: " << &a << endl;
	cout << "Address of b: " << &b << endl;

	cout << endl;
	b = 7;
	cout << "Value of a: " << a << endl;
}

void Breakpoints11()
{
	double a = 5.0;
	cout << "Address of a in main(): " << &a << endl;
	cout << "Value of a in main(): " << a << endl;
	cout << endl;

	Foo1(a);

	cout << endl;
	cout << "Value of a in main(): " << a << endl;
}

void Breakpoints12()
{
	double a = 5.0;
	cout << "Address of a in main(): " << &a << endl;
	cout << "Value of a in main(): " << a << endl;
	cout << endl;

	Foo2(a);

	cout << endl;
	cout << "Value of a in main(): " << a << endl;
}

void Breakpoints13()
{
	int a = 5;
	int* pointer = &a;

	cout << "Address of a: " << &a << endl;
	cout << "Address in pointer: " << pointer << endl;
	cout << "Address of pointer: " << &pointer << endl;

	cout << endl;
	*pointer = 7;
	cout << "Value in a: " << a << endl;
	cout << "Value by pointer address: " << *pointer << endl;
}

void Breakpoints14()
{
	double value = 5.0;
	double* pointer = &value;
	cout << "Address of value in main(): " << &value << endl;
	cout << "Address in pointer in main(): " << pointer << endl;
	cout << "Address of pointer in main(): " << &pointer << endl;
	cout << "Value of a in main(): " << value << endl;
	cout << endl;

	Foo3(pointer);

	cout << endl;
	cout << "Value of a in main(): " << value << endl;
}

void Breakpoints15()
{
	double *Array = new double[8];
	Array = new double[8] { 1.0, 15.0, 8.2, -3.5, 12.6, 38.4, -0.5, 4.5 };
	int size = sizeof(double);
	cout << "Array of double: " << endl;
	for (int i = 0; i < size; i++)
		cout << Array[i] << " ";
	delete []Array;
}

void Breakpoints16()
{
	bool *Array = new bool[8];
	Array = new bool[8] { 1, 0, 1, 1, 0, 1, 0, 0 };
	cout << "Array of bool: " << endl;
	for (int i = 0; i < 8; i++)
		cout << boolalpha << Array[i] << " ";
	delete []Array;
}

void Breakpoints17()
{

}


int main()
{
	int x;
	cout << "Enter your case: ";
	cin >> x;
	switch (x)
	{
	case 1:
		Breakpoints1(); // Task #1.1.1.1
		break;
	case 2:
		Breakpoints2(); // Task #1.1.1.2
		break;
	case 3:
		Breakpoints3(); // Task #1.1.2.1
		break;
	case 4:
		Breakpoints4(); // Task #1.1.2.2
		break;
	case 5:
		Breakpoints5(); // Task #1.1.2.3
		break;
	case 6:
		Breakpoints6(); // Task #1.1.3.1 is function - "GetPower"  // Task #1.1.3.2
		break;
	case 7:
		Breakpoints7(); // Task #1.1.3.3 is function - "DemoGetPower"  // Task #1.1.3.4
		break;
	case 8:
		Breakpoints8(); // Task 1.1.4.1
		break;
	case 9:
		Breakpoints9(); // Task 1.1.4.2
		break;
	case 10:
		Breakpoints10(); // Task 1.1.4.3
		break;
	case 11:
		Breakpoints11(); // Task 1.1.4.4
		break;
	case 12:
		Breakpoints12(); // Task 1.1.4.5
		break;
	case 13:
		Breakpoints13(); // Task 1.1.4.6
		break;
	case 14:             // Task 1.1.4.7 - при объявлении указателя "*" стоит после типа данных;
		Breakpoints14(); // при разыменовании "*" стоит перед именем указателя;     // Task 1.1.4.8
		break;           // при умножении слева и справа от "*" будут находиться имена;
	case 15:
		Breakpoints15(); // Task 1.1.5.1
		break;
	case 16:
		Breakpoints16(); // Task 1.1.5.2
		break;
	case 17:
		Breakpoints17(); // Task 1.1.5.3
		break;
	default:
		cout << "Error";
	}
	cout << endl << endl;
}
